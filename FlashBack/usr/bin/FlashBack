#!/bin/sh

# MCApollo / Flashback

# _______________             ______ ______              ______  
# ___  ____/__  /_____ __________  /____  /_______ _________  /__
# __  /_   __  /_  __ `/_  ___/_  __ \_  __ \  __ `/  ___/_  //_/
# _  __/   _  / / /_/ /_(__  )_  / / /  /_/ / /_/ // /__ _  ,<   
# /_/      /_/  \__,_/ /____/ /_/ /_//_.___/\__,_/ \___/ /_/|_| 
# "Backup, restore, and share your iOS setups."

# Notes:
# ** This is a dangerous script if something goes wrong. ** 
# Should be using printf instead of 'echo -e'
# "set -e" should be used instead of || (at least we have some fancy debug messages)
# DO NOT USE "cp -f" WHEN REPLACING SYSTEM FILES. Its dangerous, but yet no other solution comes to mind.

DEBUG="echo" # set to "echo" to avoid running commands that edit the filesystem.
FLASHBACKDIR="/Library/FlashBack"
BACKUPNAME=$(date +%m-%d-%y-`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1`)
BACKUPLOCATION=
STATUS=
SELECTLOCATION=
AUTOBACKUPLOCATION=
DELETEBACKUP=
DELETESELECT=

# report(){ # report to dev example function
# echo "$foo-bar has went wrong"
# echo "Report the dev if this happens more than once"
# exit 1 ; fi ;} # Kill the script

tests() { # ------------\
if [ ! $(id -u) = "0" ] ; then # root check
	echo -e "\a\n\e[0;100m[*]\e[0m \e[1;31mMust be \e[4;37mroot\e[0m \n\e[1;31m\e[0;100m[*]\e[0m Current User is\e[0m \e[4;37m$USER\e[0m\n"
exit 1 ; fi

if [ ! -d $FLASHBACKDIR/Backups ] ; then # check for /Library/Flashback/Backups, ask the user to create it if it doesn't exist.
	echo -e "\n\e[0;100m[*]\e[0m\e[1;31m Directory $FLASHBACKDIR/Backups doesn't exist!\e[0m \n\n\e[1;37mShall it be created?\e[0m"
	read -rp "	[y/N] " response # https://stackoverflow.com/questions/3231804/in-bash-how-to-add-are-you-sure-y-n-to-any-command-or-alias
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]] # Couldn't remember the expression for this.
		 then 	# Do it.
		 	$DEBUG mkdir -p $FLASHBACKDIR/Backups || exit 1
                 else 	# or Abort.
		 	echo -e "\n\e[1;97m\"Run away! Run away!\" \e[0m\n" 
    			exit 1; fi; fi ;}
# -----------------------\

pause(){
	read -sp "`echo -e '\n\e[0;100m[!]\e[0m \e[40mPress enter to continue...\e[0m'`" # read has a timeout function that could be used to advance the script by its own.
	echo -e "\n" ;}
	
# -----------------------\ 

shopt -s extglob # "Shell option set extglob" https://www.linuxjournal.com/content/bash-extended-globbing 

# -----------------------\

one() { # Function that backs-up the current preferences
	set -f # "Disable file name generation (globbing)."
	# echo "Sample text, make me into a pretty banner."
	
	TEMPBACKUPNAME=
	read -p "`echo -e '\n\e[0;100m[!]\e[0m \e[40mEnter backup name...\e[0m'` > " TEMPBACKUPNAME # BACKUPNAME has the date
	# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	TEMPBACKUPNAME=${TEMPBACKUPNAME//[^a-zA-Z0-9-.]/} # Stop bad inputs
	if [[ $TEMPBACKUPNAME = "" ]] ; then
		echo -e "\n\e[0;100m[!]\e[0m \e[40mBad or no input... Using $BACKUPNAME instead\e[0m"
	else
		# TEMPBACKUPNAME=${TEMPBACKUPNAME//[^a-zA-Z0-9-.]/}
		BACKUPNAME=$TEMPBACKUPNAME; fi
	# //////////////////////////////////
	set +f
	BACKUPLOCATION=$FLASHBACKDIR/Backups/$BACKUPNAME
	$DEBUG mkdir -p $BACKUPLOCATION/{Preferences,IconLayout} || STATUS="mkdir failed"
	echo -e "\n\e[0;100m[!]\e[0m \e[40mCopying to $BACKUPLOCATION\e[0m"
	
	#find -iname '/var/mobile/Library/Preferences/*.plist' -not -name com.apple.*.plist -exec cp {} $backupLocation/Preferences/ \;		
	$DEBUG cp -rf "/var/mobile/Library/Preferences/"!(com.apple*|com.saurik*|ckkeyrolld|nfcd|UITextInputContextIdentifiers).plist $BACKUPLOCATION/Preferences/ || STATUS="cp failed" #copy all non-apple Plists to Preference folder within backup haha
	$DEBUG cp -rf /var/mobile/Library/SpringBoard/IconState.plist $BACKUPLOCATION/IconLayout/IconState.plist || STATUS="cp failed"		#copy IconState Plist to IconLayout folder within backup
	
	# |||||||||||||||||||||||||||||||||||
	if [[ ! $STATUS = "" ]] ; then
		echo -e "\a\n\e[0;100m[*]\e[0m \e[1;31mSomething went wrong: $STATUS \e[0m\n"
		exit 1 ; fi # TODO MCApollo: Make a report to developer function.
	# //////////////////////////////////
	
	echo -e "\n\e[40m Success! \e[0m \n"
	pause ;}

# -----------------------\

two() { # Restore backups made with function one

	# TODO: MCApollo
	# Check if any backups exist before doing this.
	# We softlock if we don't have any backups
	
	echo -e "\n\e[40m Available Backups: \e[0m \n"
	for i in $(ls $FLASHBACKDIR/Backups/ || echo "#CRTL-C_to_exit#") ; do # Find and sed are not default commands- can't exclude files.
		echo -e "\e[40m ----> \e[0m $i" ; done
	 
	SELECTBACKUP=
	while [[ $SELECTBACKUP = "" ]] ; do
		set -f
		unset RESET
		read -p "`echo -e '\n\e[0;100m[!]\e[0m \e[40mSelect Backup\e[0m'` -> " SELECTBACKUP
		SELECTBACKUP=${SELECTBACKUP//[^a-zA-Z0-9-.]/}
		if [[ $SELECTBACKUP = "" ]] ; then
			echo -e "\n\e[0;100m[*]\e[0m \e[1;31mBad or no input!\e[0m\n" 
			RESET="YES"; fi
		if [[ ! -d $FLASHBACKDIR/Backups/$SELECTBACKUP ]] && [[ -z ${RESET+x} ]]  ; then
                        echo -e "\n\e[0;100m[*]\e[0m \e[1;31mNo backup with that name exists!\e[0m"
                        SELECTBACKUP="" ; fi
		
		set +f ; done
		
	SELECTLOCATION=$FLASHBACKDIR/Backups/$SELECTBACKUP
	AUTOBACKUPLOCATION=$FLASHBACKDIR/Backups/AutoBackup_$(date '+%d-%m-%Y_%H:%M:%S')
	
	echo -e "\n\e[0;100m[!]\e[0m \e[40mMoving current Preferences to $AUTOBACKUPLOCATION\e[0m"
	
	$DEBUG mkdir -p $AUTOBACKUPLOCATION/{Preferences,IconLayout} || STATUS="mkdir failed"
	$DEBUG cp "/var/mobile/Library/Preferences/"!(com.apple*|com.saurik*|ckkeyrolld|nfcd|UITextInputContextIdentifiers).plist  $AUTOBACKUPLOCATION/Preferences || STATUS="cp failed"
	$DEBUG cp -rf /var/mobile/Library/SpringBoard/IconState.plist $AUTOBACKUPLOCATION/IconLayout/IconState.plist || STATUS="cp failed"
	
	echo -e "\n\e[0;100m[!]\e[0m \e[40mCopying Backup to appropriate system directories...\e[0m"
	
	$DEBUG cp -r $SELECTLOCATION/Preferences/*.plist /var/mobile/Library/Preferences/ || STATUS="cp failed"
	$DEBUG cp $SELECTLOCATION/IconLayout/IconState.plist /var/mobile/Library/SpringBoard/IconState.plist || STATUS="cp failed"
	
	echo -e "\n\e[0;100m[*]\e[0m \e[40mRebuilding UICache...\e[0m"
	
	$DEBUG uicache || STATUS="uicache failed"
	#$DEBUG uicache || STATUS="uicache failed" # Doing it twice for no reason?
	
	if [[ ! $STATUS = "" ]] ; then
	echo -e "\a\n\e[0;100m[*]\e[0m \e[1;31mSomething went wrong: $STATUS \e[0m\n"
	exit 1 ; fi # TODO: Make a report to developer function.
	
	if [ -z ${SSH_TTY+x} ] ; then # Should we kill SpringBoard or not?
		# This is NewTerm
		echo -e "\a\n\e[0;100m[!]\e[0m \e[1;31mKilling SpringBoard \e[0m\n\n\e[0;100m Thank you for using Flashback! \e[0m"
		$DEBUG killall -9 SpringBoard && exit 0 # Kill the script.
	else
		# This is a SSH Session
		echo -e "\a\n\e[0;100m[!]\e[0m \e[1;31mKilling SpringBoard \e[0m\n\n\e[0;100m Thank you for using Flashback! \e[0m"
		$DEBUG killall -9 SpringBoard
	fi
	pause ;}
	
three(){ # Function that deletes backups
	echo -e "\n\e[40m Available Backps: \e[0m \n"
	for i in $(ls $FLASHBACKDIR/Backups/ || echo "#CRTL-C_to_exit#") ; do # Find and sed are not default commands- can't exclude files.
		echo -e "\e[40m ----> \e[0m $i" ; done
		
	DELETEBACKUP=
	while [[ $DELETEBACKUP = "" ]] ; do
                unset RESET
                set -f
                read -p "`echo -e '\n\e[0;100m[!]\e[0m \e[40mSelect Backup\e[0m'` -> " DELETEBACKUP
                DELETEBACKUP=${DELETEBACKUP//[^a-zA-Z0-9-.]/}
               if [[ $DELETEBACKUP = "" ]]; then
                        echo -e "\n\e[0;100m[*]\e[0m \e[1;31mBad or no input!\e[0m" 
                                RESET="YES" ; fi
               if [[ ! -d $DELETEBACKUP ]] && [[ -z ${RESET+x} ]]  ; then
                        echo -e "\n\e[0;100m[*]\e[0m \e[1;31mNo backup with that name exists!\e[0m"
                        DELETEBACKUP="" ; fi
               set +f ; done
	DELETELOCATION=$FLASHBACKDIR/Backups/$DELETEBACKUP
	
	
	DELETECP=
	echo -e "\n\e[0;100m[!]\e[0m\e[1;31m Are you REALLY sure you want to delete this backup?\e[0m\n \n\e[1;37mType \"FLASHBACK\" exactly the way it is if you're sure!\e[0m\n"
	read -p "-----> " DELETECP
	if [[ $DELETECP = "FLASHBACK" ]]
	then
		echo -e "\n\e[0;100m[!]\e[0m \e[40mDeleting $DELETELOCATION\e[0m"
		$DEBUG rm -r $DELETELOCATION
	else
	echo -e "\n\e[0;100m[!]\e[0m \e[40mNot deleting $DELETELOCATION\e[0m"; fi
	
	pause ;}

four(){ # Function that deletes autobackups made in function two
	DELETEAB=
	echo -e "\n\e[0;100m[!]\e[0m\e[1;31m Are you REALLY sure you want to delete all AutoBackups?\e[0m\n \n\e[1;37mType \"FLASHBACK\" exactly the way it is if you're sure!\e[0m\n"
	read -p "-----> " DELETEAB
	if [[ $DELETEAB = "FLASHBACK" ]]
	then
		echo -e "\n\e[0;100m[!]\e[0m \e[40mDeleting all autobackups...\e[0m"
		$DEBUG rm -r $FLASHBACKUPDIR/Backups/AutoBackup*
	else
		echo -e "\n\e[0;100m[!]\e[0m \e[40mExiting...\e[0m"; fi
	pause ;}
	
five(){ # I'm not going to painstakingly fix this. You gotta do that yourself. - Apollo
	echo -e "\n\e[40m Available Backps: \e[0m \n"
	for i in $(ls $FLASHBACKDIR/Backups/ || echo "#CRTL-C_to_exit#") ; do # Find and sed are not default commands- can't exclude files.
		echo -e "\e[40m ----> \e[0m $i" ; done
	read -p "[!]Choose a Backup: " packageBackup		#User selects backup to package, hopefully
	read -p "[!]Enter Your UserName: " userName		#Enter the name of the setup creator
	read -p "[!]Enter Your Email: " userEmail		#Enter the name of the setup creator
	read -p "[!]Enter A Short Description: " userDesc		#Enter a description
	
	# TODO: MCApollo
	# Clean the input, wildcard (*) makes it game over.
	
	echo " "
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo " "
	echo "Would you like to specify dependancies?"
	echo "If so, it's recommended to use iCleaner Pro to clean up unused preference files before you start."
	echo " "
	echo "Automatic: You select which packages are dependancies, for a streamlined installation."
	echo "This is highly recommended if you intend to host your setup on a repo, or share with other users."
	echo ""
	echo "Manual: Dependancies are not set for users, they must install the tweaks themselves."
	echo "This is recommended if you plan to use this setup personally."
	echo " "
	read -p "[!]Type 'yes' to proceed in automatic mode, press enter to use manual mode: " autoMode		#User will specify which packages are backed up and depended upon
	
	if [[ $autoMode = "yes" ]]
	then
		echo " "
		echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
		echo " "
		read -p "[!]Staring automatic mode. A list of installed packages will appear in a moment. Use that list to select which packages are dependancies. Press enter to proceed."
		apt-mark auto "gsc*" &> /dev/null # || STATUS="SEG FAULT" or STATUS="apt-mark failed"
		# For some reason, apt likes to seg fault. Maybe due to too much memory is being used?
		echo " "
		apt-mark showmanual # || STATUS="SEG FAULT"
		
		# TODO: MCApollo
		# Copy paste the STATUS check and exit if seg fault.
		# Or better yet, the exit code is 139 if it's a seg fault.
		# Use the exit code to see if apt seg fault; exit or try again once.
		
		echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
		echo ""
		read -p "[!]Please copy all desired dependancies from above EXACTLY as they are displayed. Separate them with a comma and a space (, ): " userSetDependancies
	fi
	
	
	
	echo ""
	echo "Creating working directory..."
	mkdir $FLASHBACKDIR/working
	workingDir=$FLASHBACKDIR/working/$packageBackup
	echo "Creating debian layout..."
	mkdir $workingDir # Here to-
	mkdir $workingDir/DEBIAN/
	mkdir $workingDir/Library/
	mkdir $workingDir/Library/FlashBack/
	mkdir $workingDir/Library/FlashBack/Backups/ 
	mkdir $workingDir/Library/FlashBack/Backups/$packageBackup # Here, is not need
	
	# mkdir -p $workingDir/Library/FlashBack/Backups/$packageBackup
	# $DEBUG mkdir -p $workingDir$FLASHBACKDIR/Backups/$packageBackup # Correct answer; you're hard-coding /Library/FlashBack

	echo "Copying backup to debian format..."
	excludeControl="!(control*)"
	cp -r $FLASHBACKDIR"/Backups/"$packageBackup/$excludeControl $workingDir/Library/FlashBack/Backups/$packageBackup/
	
	if [[ $autoMode = "yes" ]]
	then

cat > $workingDir/DEBIAN/control <<EOF

Package: com.$userName.$packageBackup
Name: $backupName
Depends: com.mpg13.FlashBack, $userSetDependancies
architecture: iphoneos-arm
Version:1.0
Description: $userDesc
Maintainer: MPG13 <micahplacido@gmail.com>
Author: $userName <$userEmail>
Section: Addons (FlashBack)

EOF

	else
	
cat > $backupLocation/control <<EOF

Package: com.$userName.$backupName
Name: $backupName
Depends: com.mpg13.FlashBack
architecture: iphoneos-arm
Version:1.0
Description: $userDesc
Maintainer: MPG13 <micahplacido@gmail.com>
Author: $userName <$userEmail>
Section: Addons (FlashBack)

EOF

	fi
	
	echo "Packaging DEB..."
	dpkg-deb -Zgzip -b $workingDir
	echo "Moving DEB..."
	cp $workingDir.deb $FLASHBACKDIR
	echo "Cleaning working directory..."
	rm -r -f $FLASHBACKDIR/working # Use /tmp 
	echo " "
	echo "The DEB can be found in "$FLASHBACKDIR"/"$packageBackup".deb"


# TODO MCApollo
# Use dpkg-deb or dpkg to make sure it's a vaild package. (Maybe extract it?) 

	pause
}

# TODO Idea: MCApollo
# Get the amount of $COLUMNS and $LINES, scale the UI base on that information
# For example, (( ~ X $COLUMNS)) into a VAR and then echo $VAR instead of hard-coding "~~~~~~~~~~~"

show_menus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~"	
	echo "	FlashBack "
	echo " This software is in"
	echo " BETA. Use it at your"
	echo "     own risk!" 
	echo "~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Backup Current Preferences"
	echo "2. Restore Backup"
	echo "3. Delete Backups"
	echo "4. Delete AutoBackups"
	echo "5. Package Backup to DEB"
	echo "6. Quit"
}

read_options(){
	local choice
	read -p "[!]Enter choice [ 1 - 6] " choice
	case $choice in
		1) one ;;
		2) two ;;
		3) three ;;
		4) four ;;		
		5) five;;
		6) exit 0;;
		*) echo "Invalid Selection!" && sleep 2
	esac
}

tests
while true
do
 	shopt -s extglob
	show_menus
	echo " "
	read_options
done
